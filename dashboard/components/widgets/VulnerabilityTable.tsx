/* src/app/dashboard/components/widgets/VulnerabilityTable.tsx */
'use client';

import { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import { Trash2 } from 'lucide-react';
import { Vulnerability } from '../../../types';

interface VulnerabilityTableProps {
  timeRange?: string;
}

export default function VulnerabilityTable({ timeRange }: VulnerabilityTableProps) {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    async function loadVulnerabilities() {
      try {
        setLoading(true);
        const response = await fetch('/api/vulnerabilities', {
          headers: { 'Content-Type': 'application/json' },
        });
        if (!response.ok) {
          throw new Error('Failed to fetch vulnerabilities');
        }
        const data = await response.json();
        setVulnerabilities(data);
        setError('');
      } catch (err) {
        setError('Failed to load vulnerabilities');
        console.error('Error fetching vulnerabilities:', err);
      } finally {
        setLoading(false);
      }
    }
    loadVulnerabilities();
  }, [timeRange]);

  const handleDeleteVulnerability = async (cve_id: string) => {
    try {
      await fetch('/api/vulnerabilities', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ cve_id }),
      });
      setVulnerabilities(vulnerabilities.filter((vuln) => vuln.cve_id !== cve_id));
      setError('');
    } catch (err) {
      setError('Failed to delete vulnerability');
      console.error('Error deleting vulnerability:', err);
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-[#2D2D2D] p-6 rounded-lg border border-[#8B0000]/50"
    >
      <h2 className="text-lg font-semibold text-gray-400 mb-4">
        Vulnerabilities {timeRange && `(${timeRange})`}
      </h2>
      {error && <p className="text-red-500 mb-4">{error}</p>}
      {loading ? (
        <p className="text-gray-400">Loading vulnerabilities...</p>
      ) : vulnerabilities.length === 0 ? (
        <p className="text-gray-400">No vulnerabilities found.</p>
      ) : (
        <div className="table-container">
          <table className="table">
            <thead>
              <tr>
                <th>CVE ID</th>
                <th>Software</th>
                <th>Severity</th>
                <th>Description</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {vulnerabilities.map((vuln) => (
                <tr key={vuln.cve_id}>
                  <td>{vuln.cve_id}</td>
                  <td>{vuln.software_id}</td>
                  <td>
                    <span
                      className={
                        vuln.severity === 'CRITICAL'
                          ? 'text-red-500'
                          : vuln.severity === 'HIGH'
                          ? 'text-orange-500'
                          : 'text-yellow-500'
                      }
                    >
                      {vuln.severity}
                    </span>
                  </td>
                  <td>{vuln.description}</td>
                  <td>{vuln.status}</td>
                  <td>
                    <motion.button
                      whileHover={{ scale: 1.05 }}
                      onClick={() => handleDeleteVulnerability(vuln.cve_id)}
                      className="text-red-500 hover:text-red-700"
                    >
                      <Trash2 className="w-5 h-5" />
                    </motion.button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </motion.div>
  );
}